/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

void partition(ListNode *head, ListNode *&left, ListNode *&right)
{
	ListNode *fast = head->next, *slow = head;

	while(fast && fast->next)
	slow = slow->next, fast = fast->next->next;

	left = head, right = slow->next, slow->next = NULL;
}

ListNode* mergeList(ListNode *left, ListNode *right)
{
	if(!left)
	return right;
	
	if(!right)
	return left;

	if(left->val <= right->val)
	{
    	left->next = mergeList(left->next, right);
    
    	return left;
	}
	else
	{
   		right->next = mergeList(left, right->next);
    
    	return right;
	}
}

void mergeSort(ListNode *&head)
{
	if(!head || !head->next)
	return;

	ListNode *left, *right;

	partition(head, left, right);

	mergeSort(left);
	mergeSort(right);

	head = mergeList(left, right);	
}

class Solution 
{
    public:
        ListNode* sortList(ListNode* head) 
        {
            mergeSort(head);
            
            return head;
        }
};