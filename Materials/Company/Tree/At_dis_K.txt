// https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/
// https://practice.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1#

void dfs1(Node *root, int tar, int k, vector<int> &ans)
{
    if(!root) return;
    
    if(k == 0)
    {
        ans.push_back(root->data);
        
        return;
    }
    
    dfs1(root->left, tar, k-1, ans);
    dfs1(root->right, tar, k-1, ans);
}

int dfs(Node *root, int tar, int k, vector<int> &ans)
{
    if(!root) return -1;
    
    if(root->data == tar)
    {
        dfs1(root, tar, k, ans);
        
        return 1;    
    }
    
    int l = dfs(root->left, tar, k, ans);
    
    if(l != -1)
    {
        if(l == k)
        ans.push_back(root->data);
        else
        dfs1(root->right, tar, k-l-1, ans);
        
        return l + 1;
    }
    
    int r = dfs(root->right, tar, k, ans);
    
    if(r != -1)
    {
        if(r == k)
        ans.push_back(root->data);
        else
        dfs1(root->left, tar, k-r-1, ans);
        
        return r + 1;
    }
    
    return -1;
}

class solver
{
    public:
        vector <int> KDistanceNodes(Node* root, int tar , int k)
        {
            vector<int> ans;
            
            dfs(root, tar, k, ans);
            
            sort(ans.begin(), ans.end());
            
            return ans;
        }
};