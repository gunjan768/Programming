#include<bits/stdc++.h>
using namespace std;

class LruCache
{
    private:
        int cap;
        list<int> dq;
        unordered_map<int, list<int>::iterator> mp;

    public:
        LruCache(int cap)
        {
            this->cap = cap;
        }

        void add(int);
        void display();
};

void LruCache::add(int val)
{
    if(mp.find(val) == mp.end())
    {
        if(dq.size() == cap)
        {
            int last = dq.back(); dq.pop_back();

            mp.erase(last);
        }
    }
    else
    {
        dq.erase(mp[val]);
    }

    dq.push_front(val); mp[val] = dq.begin();
}

void LruCache::display()
{
    for(auto it:dq)
    printf("%d ",it);

    printf("\n");
}

int main()
{
    int cap,n; scanf("%d %d",&cap,&n);

    LruCache *obj = new LruCache(cap);

    for(int i=0;i<n;i++)
    {
        int val; scanf("%d",&val);

        obj->add(val);

        obj->display();
    }

    delete(obj);
}