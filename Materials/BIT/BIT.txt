#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod=1e9+7;
const int N=5e5+5;
int t;

int n,a[N];
map<int,int>mp;
ll bit[N];

void update(int ind,int val)
{
    while(ind<=n)
    bit[ind]+=val,ind+=ind&(-ind);
}

ll query(int ind)
{
    ll sum=0;

    while(ind>0)
    sum+=bit[ind],ind-=ind&(-ind);

    return sum;
}

void performMapping()
{
    int cnt=1;

    set<int>s1;

    rep(i,0,n)
    s1.insert(a[i]);

    for(auto it:s1)
    mp[it]=cnt++;
}

int main()
{
    t=1;

    while(t--)
    {
        scn(n);

        rep(i,0,n)
        scn(a[i]);

        performMapping();

        ll inversion=0;

        for(int i=n-1;i>=0;i--)
        inversion+=query(mp[a[i]]-1),update(mp[a[i]],1);
        
        printf("%lld\n",inversion);
    }
}
