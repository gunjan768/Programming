#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;++i)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define pb           emplace_back    
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define inf          2e9+7
const int mod = 1e9+7;
const int N = 5e5+5;

int n, m, a[N], vis[N], low[N], dis[N], tim;
ll sum, alice;
vector<int>v1[N];
 
ll dfs(int node, int par)
{
    low[node] = dis[node] = ++tim, vis[node] = 1;
    
    ll add = a[node];
    
    for(auto it:v1[node])
    if(it != par)
    {
        if(vis[it] == 0)
        {            
            ll val = dfs(it,node);

            if(low[it] > dis[node])
            {
                // Bridge
            }

            low[node] = min(low[it], low[node]);

            add += val;
        }
        else
        low[node] = min(low[node], dis[it]);
    }

    return add;
}

int main()
{
    int test; scn(test);

    for(int tt = 1; tt <= test; ++tt)
    {
        
    }

    return 0;
}