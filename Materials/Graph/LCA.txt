#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;++i)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define pb           emplace_back    
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define inf          2e9+7
const int mod = 1e9+7;
const int N = 5e5+5;

int n, m, a[N], lim, query, tim;
int lev[N], up[N][35], in[N], out[N];
vector<int> v1[N];

void dfsLca(int node, int par)
{
	in[node] = ++tim, up[node][0] = par;
	
	for(int i = 1; i <= lim; ++i) 
    up[node][i] = up[up[node][i-1]][i-1];

	for(const auto it: v1[node])
	if(it != par)
	lev[it] = lev[node] + 1, dfsLca(it, node);

	out[node] = ++tim;
}

inline bool isancestor(int u, int v)
{
	return (in[u] < in[v] && out[u] > out[v]);
}

int LCA(int u, int v)
{
	if(isancestor(u,v)) return u;
	
	if(isancestor(v,u)) return v;
	
	if(u == v) return u;
	
	for(int i = lim; i >= 0; --i)
	if(!isancestor(up[u][i], v))
	u = up[u][i];
	
	return up[u][0];
}

int Log(int num, int base)
{
    int cnt = -1;

    while(num > 0) ++cnt, num /= base;

    return cnt;
}

int main()
{
    int test; scn(test);

    for(int tt = 1; tt <= test; ++tt)
    {
        scn(n);

        [&]() -> void
        {
            for(int i = 0; i <= n; ++i)
            {
                v1[i].clear();

                a[i] = lev[i] = in[i] = out[i] = 0;

                for(int j = 0; j <= 30; ++j) up[i][j] = 0;
            }

            tim = 0, lim = Log(n, 2) + 1;
        }();
    }

    return 0;
}