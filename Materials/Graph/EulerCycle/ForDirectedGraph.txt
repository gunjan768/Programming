#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod = 1e9+7;
const int N = 5e5+5;

int n, m, indeg[N], vis[N];
vector<int>v1[N];

void dfs(int node = 1)
{
    vis[node] = 1;

    for(auto it:v1[node])
    if(vis[it] == 0)
    dfs(it);
}

void init()
{
    for(int i=0;i<=n;i++)
    v1[i].clear(), indeg[i] = vis[i] = 0;
}

int main()
{
    int test; scn(test);

    while(test--)
    {
        scns(n,m);

        init();
        
        for(int i=0;i<m;i++)
        {
            int u,v; scns(u,v);

            v1[u].pb(v), indeg[v]++;
        }

        int flag = 1, cnt = 0;

        for(int i=1;i<=n;i++)
        if(v1[i].size() != indeg[i])
        flag = 0;

        if(flag == 0)
        {
            printf("-1\n");

            continue;
        }

        for(int i=1;i<=n;i++)
        if(vis[i] == 0)
        dfs(i), cnt++;

        if(cnt>1)
        printf("-1\n");
        else
        printf("1\n");
    }
}