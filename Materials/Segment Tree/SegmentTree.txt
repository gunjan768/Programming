#include<bits/stdc++.h>
using namespace std;
// #include <ext/pb_ds/tree_policy.hpp>
// #include <ext/pb_ds/assoc_container.hpp>
// using namespace __gnu_pbds;
// template <typename T>  using ordered_set =
// tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod = 1e9+7;
const int N = 5e5+5;
 
int n, a[N], tree[4*N];
 
void build(int st,int end,int node)
{
    if(st == end)
    {
        tree[node] = a[st];
 
        return;
    }
 
    int mid = (st+end)/2;
 
    build(st,mid,2*node);
    build(mid+1,end,2*node+1);
 
    tree[node] = tree[2*node]^tree[2*node+1];
}
 
void update(int st,int end,int ind,int val,int node)
{
    if(st == end)
    {
        tree[node] ^= val, a[ind] ^= val; 
        
        return;
    }
    
    int mid = (st+end)/2;
    
    if(ind <= mid)
    update(st,mid,ind,val,2*node);
    else
    update(mid+1,end,ind,val,2*node+1);
    
    tree[node] = tree[2*node]^tree[2*node+1];
}
 
int query(int st,int end,int qs,int qe,int node)
{
    if(st>qe || end<qs)
    return 0;
 
    if(st >= qs && end <= qe)
    return tree[node];
 
    int mid = (st+end)/2;
 
    int left = query(st,mid,qs,qe,2*node);
    int right = query(mid+1,end,qs,qe,2*node+1);
 
    return left^right;
}
 
int main()
{
    int test; scn(test);

    while(test--)
    {

    }
}