#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod = 1e9+7;
const int N = 5e5+5;

int n;

void preprocess(string&,int*);

void kmp(string txt, string pt)
{
    int n = (int)txt.size(), m = (int)pt.size(), lps[m+1] = {};

    preprocess(pt,lps);

    int i = 0, j = 0;    
 
    while(i<n)
    {
        if(txt[i] == pt[j])
        i++,j++;
      
        if(j == m)
        cout<<"Pattern Found at : "<<i-j<<endl, j = lps[j-1];
        else if(i<n && txt[i] != pt[j])
        {
            if(j != 0)
            j = lps[j-1];
            else
            i++;
        }
    }
}

void preprocess(string &pt,int *lps)
{
    int i = 0, j = 1, m = (int)pt.size(); 

    while(j<m)
    {
        if(pt[i] == pt[j])
        lps[j++] = ++i;
        else
        {
            if(i != 0)
            i = lps[i-1];
            else
            lps[j++] = 0;
        }
    }
}

int main()
{
    int test; scn(test);

    while(test--)
    {
        string txt,pt; cin>>txt>>pt;

        kmp(txt,pt);
    }
}