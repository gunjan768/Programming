#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod=1e9+7;
const int N=5e5+5;
int t;

int n,fact[3*N],inv[3*N];

int power(int a,int b)
{
    int res=1;
 
    while(b)
    {
        if(b&1)
        res=(1LL*res*a)%mod;
 
        a=(1LL*a*a)%mod;
        
        b>>=1;
    }
 
    return res;
}

void factorial()
{
    fact[0]=fact[1]=1;
    
    rep(i,2,2*N)
    fact[i]=(1LL*i*fact[i-1])%mod;

    inverse();
}

void inverse()
{
    inv[2*maxx-1]=power(fact[2*N-1],mod-2);
    
    for(int i=2*N-1;i>0;i--)
    inv[i-1]=(1LL*i*inv[i])%mod;
}

int ncr(int n,int r)
{
    if(r>n)
    return 0;
    
    int val=fact[n];
    
    val=(1LL*val*inv[r])%mod;
    val=(1LL*val*inv[n-r])%mod;
    
    return val;
}

void factors(ll n)
{
    for(ll i=1;i*i<=n;i++)
    if(!(n%i))
    v1.pb(i);
}