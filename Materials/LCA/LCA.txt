#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod=1e9+7;
const int N=5e5+5;
int t;

int n,m,a[N],lim,query,tim=1;
int up[N][30],in[N],out[N],level[N];
vec v1[N],vis;

void dfsLca(int u,int par)
{
	up[u][0]=par;

	in[u]=tim++;
	
	rep(i,1,lim+1)
	up[u][i]=up[up[u][i-1]][i-1];

	for(auto it:v1[u])
	if(it!=par)
	level[it]=level[u]+1,dfsLca(it,u);

	out[u]=tim++;
}

bool isancestor(int u,int v)
{
	return (in[u]<in[v] && out[u]>out[v]);
}

int findLca(int u,int v)
{
	if(isancestor(u,v))
	return u;
	
	if(isancestor(v,u))
	return v;
	
	if(u==v)
	return u;
	
	for(int i=lim;i>=0;i--)
	{
		if(!isancestor(up[u][i],v))
		u=up[u][i];
	}
	
	return up[u][0];
}

int logg(int num,int base)
{
    int cnt=-1;

    while(num>0)
    cnt++,num/=base;

    return cnt;
}

ll distacne(int u,int v)
{
    ll dis=1LL*level[u]-1LL*level[v];

    return dis;
}

void init()
{
    rep(i,0,n+1)
    v1[i].clear(),in[i]=0,out[i]=0,level[i]=0;

    tim=1;
}

int main()
{
	scn(t);

    while(t--)
    {
        scns(n,m);

        init();

        for(int i=0;i<m;i++)
        {
            int a,b; scns(a,b);
            
            v1[a].pb(b);  v1[a].pb(b);
        }
        
        lim = logg(n,2)+1;
        
        dfsLca(1,1);

        scn(query);

        while(query--)
        {
            int a,b; scns(a,b);
            
            int lca = findLca(a,b);

            print(lca);
        }
    }
}
