void partition(Node *curr, Node *&list1, Node *&list2)
{
    Node *slow=curr,*fast=curr->next;
    
    while(fast && fast->next)
    slow=slow->next,fast=fast->next->next;
    
    list1=curr,list2=slow->next,slow->next=nullptr;
}

Node* mergeList(Node *list1,Node *list2)
{
    if(!list1)
    return list2;
    
    if(!list2)
    return list1;
    
    Node *curr;
    
    if(list1->data<list2->data)
    curr=list1,curr->next=mergeList(list1->next,list2);
    else
    curr=list2,curr->next=mergeList(list1,list2->next);
    
    return curr;
}

void MergeSort(Node *&head)
{
    Node *curr=head,*list1,*list2;
    
    if(!curr || !curr->next)
    return;
    
    partition(curr,list1,list2);
    
    MergeSort(list1);
    MergeSort(list2);
    
    head=mergeList(list1,list2);
}

/* Function to mergesort the linked list
   It should return head of the modified list  */
Node* mergeSort(Node* head) 
{
    MergeSort(head);
    
    return head;
}