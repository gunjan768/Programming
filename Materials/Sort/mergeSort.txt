#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>  using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll           long long
#define rep(i,j,n)   for(int i=j;i<n;i++)
#define scn(a)       scanf("%d",&a)
#define scns(a,b)    scanf("%d %d",&a,&b)
#define print(a)     printf("%d\n",a)
#define vec          vector<int>
#define pb           push_back    
#define pairs        pair<int,int>
#define f            first
#define s            second
#define all(v)       v.begin(),v.end()
#define mem(a,b)     memset(a,b,sizeof(a))
#define inf          INT_MAX
const int mod=1e9+7;
const int N=5e5+5;
int t;

int n,a[N];

void merge(int low,int mid,int high)
{
    int sz1=mid-low+1,sz2=high-mid;

    int temp1[sz1],temp2[sz2];

    for(int i=0;i<sz1;i++)
    temp1[i]=a[low+i];

    for(int i=0;i<sz2;i++)
    temp2[i]=a[mid+1+i];

    int i=0,j=0,k=low;

    while(i<sz1 && j<sz2)
    {
        if(temp1[i]<temp2[j])
        a[k++]=temp1[i++];
        else
        a[k++]=temp2[j++];
    }

    while(i<sz1)
    a[k++]=temp1[i++];

    while(j<sz2)
    a[k++]=temp2[j++];
}

void mergeSort(int low,int high)
{
    if(low>=high)
    return;
    
    int mid=(low+high)/2;

    mergeSort(low,mid);
    mergeSort(mid+1,high);

    merge(low,mid,high);
}

int main()
{
    t=1;

    while(t--)
    {
        scn(n);
        
        for(int i=0;i<n;i++)
        scn(a[i]);

        mergeSort(0,n-1);

        for(int i=0;i<n;i++)
        printf("%d ",a[i]);

        printf("\n");
    }
}